<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.offcn.mapper.CourseMapper">
    <resultMap id="BaseResultMap" type="com.offcn.pojo.Course">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="classid" jdbcType="INTEGER" property="classid"/>
        <result column="studentid" jdbcType="INTEGER" property="studentid"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
    </resultMap>


    <select id="getCoursePager" resultType="Course">
        select * from course limit #{skip},#{size}
    </select>

    <select id="getCourseId" parameterType="int" resultType="Course">
        select * from course where id=#{id}
    </select>

    <select id="getCourseCount" resultType="int">select count(*) from course</select>

    <insert id="insert" parameterType="Course">
       insert into course (name,type) values (#{name,jdbcType=VARCHAR},#{type,jdbcType=VARCHAR})
    </insert>

    <delete id="delete">
        delete from course where id=#{id}
    </delete>

    <update id="update" parameterType="Course">
        update course
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=VARCHAR}
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 查看课表 -->
    <select id="getBxCourse" parameterType="Course" resultType="com.offcn.pojo.CourseExt">
     select c.*,t.name tname from ctc
    left join teacher t on ctc.tid=t.id
    left join student s on ctc.claid=s.classid
    left join course c on ctc.couid=c.id
     where  c.type=0  and s.classid=#{classid} and s.id=#{studentid}
  </select>


    <!--  <select id="getMyCourse" resultType="com.offcn.pojo.CourseExt" parameterType="int">
        select classes.name as claname,classes.type as type, course.name as couname from course,ctc,classes where ctc.tId=#{id} and ctc.claId=classes.id and ctc.couId=course.id
     </select> -->


    <!-- <sql id="Example_Where_Clause">
      <where>
        <foreach collection="oredCriteria" item="criteria" separator="or">
          <if test="criteria.valid">
            <trim prefix="(" prefixOverrides="and" suffix=")">
              <foreach collection="criteria.criteria" item="criterion">
                <choose>
                  <when test="criterion.noValue">
                    and ${criterion.condition}
                  </when>
                  <when test="criterion.singleValue">
                    and ${criterion.condition} #{criterion.value}
                  </when>
                  <when test="criterion.betweenValue">
                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                  </when>
                  <when test="criterion.listValue">
                    and ${criterion.condition}
                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                    </foreach>
                  </when>
                </choose>
              </foreach>
            </trim>
          </if>
        </foreach>
      </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
      <where>
        <foreach collection="example.oredCriteria" item="criteria" separator="or">
          <if test="criteria.valid">
            <trim prefix="(" prefixOverrides="and" suffix=")">
              <foreach collection="criteria.criteria" item="criterion">
                <choose>
                  <when test="criterion.noValue">
                    and ${criterion.condition}
                  </when>
                  <when test="criterion.singleValue">
                    and ${criterion.condition} #{criterion.value}
                  </when>
                  <when test="criterion.betweenValue">
                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                  </when>
                  <when test="criterion.listValue">
                    and ${criterion.condition}
                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                    </foreach>
                  </when>
                </choose>
              </foreach>
            </trim>
          </if>
        </foreach>
      </where>
    </sql>
    <sql id="Base_Column_List">
      id, name, type
    </sql>
    <select id="selectByExample" parameterType="com.offcn.pojo.CourseExample" resultMap="BaseResultMap">
      select
      <if test="distinct">
        distinct
      </if>
      <include refid="Base_Column_List" />
      from course
      <if test="_parameter != null">
        <include refid="Example_Where_Clause" />
      </if>
      <if test="orderByClause != null">
        order by ${orderByClause}
      </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
      select
      <include refid="Base_Column_List" />
      from course
      where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
      delete from course
      where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.offcn.pojo.CourseExample">
      delete from course
      <if test="_parameter != null">
        <include refid="Example_Where_Clause" />
      </if>
    </delete>
    <insert id="insert" parameterType="com.offcn.pojo.Course">
      insert into course (id, name, type
        )
      values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.offcn.pojo.Course">
      insert into course
      <trim prefix="(" suffix=")" suffixOverrides=",">
        <if test="id != null">
          id,
        </if>
        <if test="name != null">
          name,
        </if>
        <if test="type != null">
          type,
        </if>
      </trim>
      <trim prefix="values (" suffix=")" suffixOverrides=",">
        <if test="id != null">
          #{id,jdbcType=INTEGER},
        </if>
        <if test="name != null">
          #{name,jdbcType=VARCHAR},
        </if>
        <if test="type != null">
          #{type,jdbcType=VARCHAR},
        </if>
      </trim>
    </insert>
    <select id="countByExample" parameterType="com.offcn.pojo.CourseExample" resultType="java.lang.Long">
      select count(*) from course
      <if test="_parameter != null">
        <include refid="Example_Where_Clause" />
      </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
      update course
      <set>
        <if test="record.id != null">
          id = #{record.id,jdbcType=INTEGER},
        </if>
        <if test="record.name != null">
          name = #{record.name,jdbcType=VARCHAR},
        </if>
        <if test="record.type != null">
          type = #{record.type,jdbcType=VARCHAR},
        </if>
      </set>
      <if test="_parameter != null">
        <include refid="Update_By_Example_Where_Clause" />
      </if>
    </update>
    <update id="updateByExample" parameterType="map">
      update course
      set id = #{record.id,jdbcType=INTEGER},
        name = #{record.name,jdbcType=VARCHAR},
        type = #{record.type,jdbcType=VARCHAR}
      <if test="_parameter != null">
        <include refid="Update_By_Example_Where_Clause" />
      </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.offcn.pojo.Course">
      update course
      <set>
        <if test="name != null">
          name = #{name,jdbcType=VARCHAR},
        </if>
        <if test="type != null">
          type = #{type,jdbcType=VARCHAR},
        </if>
      </set>
      where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.offcn.pojo.Course">
      update course
      set name = #{name,jdbcType=VARCHAR},
        type = #{type,jdbcType=VARCHAR}
      where id = #{id,jdbcType=INTEGER}
    </update> -->
</mapper>